#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 101 // Size of the hash table

typedef struct Symbol {
    char name[50];
    char type[50];
    int scope; // Scope level
    struct Symbol* next; // For handling collisions (linked list)
} Symbol;

Symbol* symbolTable[TABLE_SIZE];

// Hash function to map symbols to hash table indices
unsigned int hash(const char* str) {
    unsigned int hash = 0;
    while (*str) {
        hash = (hash << 5) + *str++;
    }
    return hash % TABLE_SIZE;
}

// Initialize the symbol table
void initSymbolTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        symbolTable[i] = NULL;
    }
}

// Insert a symbol into the symbol table
void insertSymbol(const char* name, const char* type, int scope) {
    unsigned int index = hash(name);
    Symbol* newSymbol = (Symbol*)malloc(sizeof(Symbol));
    strcpy(newSymbol->name, name);
    strcpy(newSymbol->type, type);
    newSymbol->scope = scope;
    newSymbol->next = symbolTable[index];
    symbolTable[index] = newSymbol;
}

// Lookup a symbol in the symbol table
Symbol* lookupSymbol(const char* name) {
    unsigned int index = hash(name);
    Symbol* symbol = symbolTable[index];
    while (symbol != NULL) {
        if (strcmp(symbol->name, name) == 0) {
            return symbol;
        }
        symbol = symbol->next;
    }
    return NULL;
}

// Print the contents of the symbol table
void printSymbolTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        Symbol* symbol = symbolTable[i];
        while (symbol != NULL) {
            printf("Name: %s, Type: %s, Scope: %d\n", symbol->name, symbol->type, symbol->scope);
            symbol = symbol->next;
        }
    }
}

// Free the memory allocated for the symbol table
void freeSymbolTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        Symbol* symbol = symbolTable[i];
        while (symbol != NULL) {
            Symbol* toDelete = symbol;
            symbol = symbol->next;
            free(toDelete);
        }
    }
}

int main() {
    initSymbolTable();

    // Insert some symbols
    insertSymbol("var1", "int", 1);
    insertSymbol("var2", "float", 1);
    insertSymbol("func1", "void", 0);
    insertSymbol("var3", "char", 2);

    // Lookup a symbol
    Symbol* symbol = lookupSymbol("var2");
    if (symbol) {
        printf("Found symbol: Name: %s, Type: %s, Scope: %d\n", symbol->name, symbol->type, symbol->scope);
    } else {
        printf("Symbol not found\n");
    }

    // Print the symbol table
    printSymbolTable();

    // Free allocated memory
    freeSymbolTable();

    return 0;
}
