#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define N 8

void print_board(int board[N][N]);
bool is_safe(int board[N][N], int row, int col);
bool solve_n_queens(int board[N][N], int col);
void solve_and_print_n_queens();

int main() {
    solve_and_print_n_queens();
    return 0;
}

// Function to print the board
void print_board(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool is_safe(int board[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++) {
        if (board[row][i]) return false;
    }

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) return false;
    }

    // Check lower diagonal on the left side
    for (int i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) return false;
    }

    return true;
}

// Function to solve N-Queens problem using backtracking
bool solve_n_queens(int board[N][N], int col) {
    // If all queens are placed, return true
    if (col >= N) return true;

    // Consider this column and try placing a queen in all rows one by one
    for (int i = 0; i < N; i++) {
        if (is_safe(board, i, col)) {
            // Place this queen in board[i][col]
            board[i][col] = 1;

            // Recur to place the rest of the queens
            if (solve_n_queens(board, col + 1)) return true;

            // If placing queen in board[i][col] doesn't lead to a solution
            // then remove the queen from board[i][col]
            board[i][col] = 0;
        }
    }

    // If the queen can not be placed in any row in this column, return false
    return false;
}

// Function to solve the N-Queens problem and print the solution
void solve_and_print_n_queens() {
    int board[N][N];
    // Initialize the board with 0s
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            board[i][j] = 0;
        }
    }

    if (solve_n_queens(board, 0)) {
        print_board(board);
    } else {
        printf("Solution does not exist\n");
    }
}

